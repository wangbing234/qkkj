package net.onlineshop.services.front.account;import net.onlineshop.core.Services;import net.onlineshop.core.system.bean.User;import net.onlineshop.services.front.account.bean.Account;import net.onlineshop.services.front.account.bean.MebInfo;import net.onlineshop.services.front.account.bean.MebPoint;import net.onlineshop.services.front.account.bean.MebPrize;import net.onlineshop.services.front.account.bean.MebWallet;import net.onlineshop.services.front.order.bean.Order;import net.onlineshop.services.manage.orderdetail.bean.Orderdetail;/** * 前端账户信息管理类 * @author bing.wang * */public interface AccountService extends Services<Account> {	/**	 * @param e	 * @return	 */	int selectCount(Account e);	/**	 * 注册一个外部账号，此方法是现成安全的	 * 	 * @param acc	 */	void insertOutAccount(Account acc);	/**	 * 找回密码，给指定账号发送找回密码的邮件	 * 	 * @param e	 */	void doForget(Account e);	/**	 * 给指定邮箱发送邮件	 * 	 * @param e	 */	void sendEmail(Account e, String emailNotifyTemplateCode);	/**	 * 修改密码	 * 	 * @param acc	 */	void updatePasswordByAccount(Account acc);	/**	 * 修改邮箱	 */	// public void updateEmail(Account e);	/**	 * 修改邮箱	 * 	 * @param acc	 */	void updateEmailByAccount(Account acc);	/**	 * 更新会员积分和会员等级，只会更新score和rank字段。 如果会员等级发生了变动,则进行短信/站内信/邮件等方式的通知 此方法是线程安全的	 * 	 * 注意,此方法是系统中唯一更新会员积分和等级的通道入口.系统不再提供其他入口来做这个事情,包括原声的update方法也不负责此事。因为多个入口会导致积分数据混乱,同时也会影响到会员等级.	 * 	 * @param acc	 */	void updateScore(Account acc);		/**	 * 激活账号，同时使所有发出的链接都失效	 * 	 * @param acc	 */	void updateDataWhenActiveAccount(Account acc, String account);		/**	 * 登录信息	 * @param acc	 * @return	 */	public Account login(Account acc);		/**	 * 获取钱包数据	 * @param acc	 * @return	 */	public MebWallet getWallet(Integer wal);		/**	 * 获取积分	 * @param mebId	 * @return	 */	public MebPoint getPoint(String mebId);		/**	 * 更新钱包数据	 * @param mebId	 * @return	 */	public void updateWallet(Order order);		/**	 * 更新积分数据	 * @param mebId	 * @return	 */	public void updatePoint(Order order);	//	/**//	 * 更新开单付款额度和积分//	 * @param order//	 *///	public String updateOpenStatusToPass(net.onlineshop.services.manage.order.bean.Order order);		/**	 * 在签收后送积分	 * @param orderDetailId 	 * @param owner 签收人员 1，顾客签收，2，后台人员签收，3，超过7天自动签收	 */	public String updateOrderToCompete(String orderDetailId,int owner);		/**	 * 返还积分	 * @param order	 */	public String cancalOrder(String order,Boolean isCustome, String ...arg);		/**	 * 	 * @param mebId 会员id	 * @param incValue 新值	 * @param nowValue 当前值	 * @param changeId 修改id	 * @param changeReason  修改原因	 */	public void saveWalletLog(String mebId, Float incValue,Float nowValue, String changeId,String walletType,String changeReason,boolean isPoint);		/**	 * 	 * @param id	 * @return	 */	public MebInfo getMebInfo(String id);		/**	 * 获取奖品明细	 * @param wal	 * @return	 */	public MebPrize getMebPrize(MebPrize wal);		/**	 * 更新奖品明细	 * @param wal	 */	public void updateMebPrize(MebPrize wal);}