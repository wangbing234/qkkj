package net.onlineshop.web.action.manage.supplier;import java.io.IOException;import java.util.ArrayList;import java.util.Collections;import java.util.LinkedList;import java.util.List;import org.apache.commons.lang.StringUtils;import org.apache.commons.lang3.ObjectUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import com.alibaba.fastjson.JSONObject;import net.onlineshop.core.BaseAction;import net.onlineshop.core.front.SystemManager;import net.onlineshop.services.front.catalog.bean.Catalog;import net.onlineshop.services.manage.supplier.SupplierService;import net.onlineshop.services.manage.supplier.bean.Supplier;import net.sf.json.JSONArray;public class SupplierAction extends BaseAction<Supplier> {	private static final Logger logger = LoggerFactory.getLogger(SupplierAction.class);	private static final long serialVersionUID = 1L;	private SupplierService supplierService;	public void setSupplierService(SupplierService supplierService) {		this.supplierService = supplierService;	}		public Supplier getE() {		return this.e;	}	public void prepare() throws Exception {		if (this.e == null) {			this.e = new Supplier();		} else {			e.clear();		}		super.initPageSelect();	}	@Override	public String toEdit() throws Exception {		super.toEdit();		return toEdit;	}		public String toList() throws Exception {		return toList;	}			/**	 * 数据来自缓存 返回适合easyui.treegrid的JSON的数据结构 从PID=0开始加载菜单资源 获取指定节点的全部子菜单（包括当前菜单节点）	 * 	 * @return	 * @throws Exception	 */	public void getRootCatalogs() throws Exception {			JSONArray json = JSONArray.fromObject(getSelectCataLogs());			SystemManager.productCatalogJsonStr = json.toString();			super.write(SystemManager.productCatalogJsonStr);	}		/**	 * 选择产品目录列表	 */	private List<Catalog> getSelectCataLogs()	{		String eId=e.getId();		if(StringUtils.isNotEmpty(eId)){			Supplier cataList = supplierService.selectById(eId);			String cataArray = cataList.getCatalogIds(); 			if(StringUtils.isNotEmpty(cataArray)) {				List<Catalog> catalogList = getCatalogCopy();				selectCataLogs(catalogList,","+cataArray);				return catalogList;			}		}		return SystemManager.catalogs;	}		/**	 * 获取目录结构的拷贝	 * @return	 */	private List<Catalog> getCatalogCopy() {		CotalogProxy cp=new CotalogProxy();		cp.setCatalogs(SystemManager.catalogs);		String cpString = JSONObject.toJSONString(cp);		CotalogProxy cotalogProxy=JSONObject.parseObject(cpString, CotalogProxy.class);		List<Catalog> catalogList = cotalogProxy.getCatalogs();		return catalogList;	}			// 分页查询商品	public void selectListProductAjax() throws Exception {		try {			getE().setPageSize(120000);			super.selectList();// 分页搜索数据库中的商品			List productList = pager.getList();			printJson(productList);		} catch (Exception e) {			e.printStackTrace();			throw e;		}	}		private void selectCataLogs(List<Catalog> catalogsList,String cataArray) {		for (Catalog cl : catalogsList) {			if(cataArray.indexOf(","+cl.getId()+",")!=-1){				cl.setChecked(true);			}			List<Catalog> cList = cl.getChildren();			if(cList!=null && !cList.isEmpty()) {				selectCataLogs(cList, cataArray);			}		}	}			/**	 * 公共的插入数据方法，子类可以通过重写此方法实现个性化的需求。	 * 	 * @return	 * @throws Exception	 */	public String update() throws Exception {		if(StringUtils.isEmpty(e.getId())) {			insert();		}		else {			super.update();		}		SystemManager.supplierList=supplierService.selectListConst();		e.clear();		return selectList();	}			public void updateOne()throws Exception 	{		supplierService.update(e);		SystemManager.supplierList=supplierService.selectListConst();		e.clear();		getResponse().sendRedirect("supplier!selectList.action");	}		/**	 * 唯一性检查	 * 	 * @return	 * @throws IOException	 */	public String unique() throws IOException {		logger.debug("unique code = " + e.getCode());		synchronized (this) {			if (StringUtils.isNotBlank(e.getCode())) {				Supplier catalog = new Supplier();				catalog.setCode(e.getCode());				catalog = supplierService.selectOne(catalog);				if (catalog == null) {					// 数据库中部存在此编码					getResponse().getWriter().write("{\"ok\":\"编码可以使用!\"}");				} else {					if (StringUtils.isBlank(e.getId())) {						// 当前为insert操作，但是编码已经存在，则只可能是别的记录的编码						getResponse().getWriter().write("{\"error\":\"编码已经存在!\"}");					} else {						// update操作，又是根据自己的编码来查询的，所以当然可以使用啦						if (catalog.getId().equals(e.getId())) {							getResponse().getWriter().write("{\"ok\":\"编码可以使用!\"}");						} else {							getResponse().getWriter().write("{\"error\":\"编码已经存在!\"}");						}					}				}			} else {				getResponse().getWriter().write("{\"error\":\"编码不能为空!\"}");			}		}		return null;	}	@Override	public void insertAfter(Supplier e) {		// TODO Auto-generated method stub			}	protected void selectListAfter() {		pager.setPagerUrl("/manage/supplier!selectList.action");	}}